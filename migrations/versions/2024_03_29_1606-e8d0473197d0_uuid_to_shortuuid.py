"""uuid to shortuuid

Revision ID: e8d0473197d0
Revises: 08d73fea4454
Create Date: 2024-03-29 16:06:13.971688

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# if `import sqlmodel` only, still work, but the generated migration python file cannot hightlight `sqlmodel.sql.sqltypes`
# https://github.com/tiangolo/full-stack-fastapi-template/blob/master/backend/app/alembic/script.py.mako#L10
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = "e8d0473197d0"
down_revision: Union[str, None] = "08d73fea4454"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "task",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("in_progress", "pending", "done", "failed", name="taskstatus"),
            nullable=False,
        ),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_by", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("message", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("email_notification", sa.JSON(), nullable=True),
        sa.Column("context", sa.JSON(), nullable=True),
        sa.Column("uid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("ended_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("task_duration", sa.Interval(), nullable=True),
        sa.PrimaryKeyConstraint("uid", name=op.f("pk_task")),
    )
    op.create_index(op.f("ix_task_id"), "task", ["id"], unique=True)

    # Drop the foreign key constraint
    # ! drop_constraint are manually generated code, not from alembic
    op.drop_constraint(
        "fk_tag_team_link_tag_id_tag", "tag_team_link", type_="foreignkey"
    )
    op.drop_constraint(
        "fk_tag_team_link_team_id_team", "tag_team_link", type_="foreignkey"
    )
    op.drop_constraint("fk_user_team_id_team", "user", type_="foreignkey")

    op.alter_column(
        "tag",
        "id",
        existing_type=sa.UUID(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
        postgresql_using="id::text",
    )
    op.alter_column(
        "tag_team_link",
        "tag_id",
        existing_type=sa.UUID(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
        postgresql_using="tag_id::text",
    )
    op.alter_column(
        "tag_team_link",
        "team_id",
        existing_type=sa.UUID(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
        postgresql_using="team_id::text",
    )
    op.alter_column(
        "team",
        "id",
        existing_type=sa.UUID(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
        postgresql_using="id::text",
    )
    op.alter_column(
        "user",
        "id",
        existing_type=sa.UUID(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
        postgresql_using="id::text",
    )
    op.alter_column(
        "user",
        "team_id",
        existing_type=sa.UUID(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=True,
        postgresql_using="team_id::text",
    )

    # Re-add the foreign key constraint
    # ! create_foreign_key are manually generated code, not from alembic
    op.create_foreign_key(
        "fk_tag_team_link_tag_id_tag", "tag_team_link", "tag", ["tag_id"], ["id"]
    )
    op.create_foreign_key(
        "fk_tag_team_link_team_id_team", "tag_team_link", "team", ["team_id"], ["id"]
    )
    op.create_foreign_key("fk_user_team_id_team", "user", "team", ["team_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "user",
        "team_id",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.UUID(),
        existing_nullable=True,
    )
    op.alter_column(
        "user",
        "id",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "team",
        "id",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "tag_team_link",
        "team_id",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "tag_team_link",
        "tag_id",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "tag",
        "id",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.drop_index(op.f("ix_task_id"), table_name="task")
    op.drop_table("task")
    # ### end Alembic commands ###

# ! file generated by `docker init` from Docker Desktop

# docker build -t api . --build-arg app_version=0.0.0 --secret id=PIP_INDEX_URL,env=PIP_INDEX_URL
# docker run -p 8000:8000 --name my-api -d api
# docker logs my-api
# docker exec -it my-api bash
# docker ps -aq | xargs docker rm -f && docker images -q | xargs docker rmi -f

ARG PYTHON_VERSION=3.12
FROM python:${PYTHON_VERSION}-slim as base


# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#user
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

WORKDIR /code

COPY requirements/base.txt requirements.txt

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN --mount=type=secret,id=PIP_INDEX_URL \
    --mount=type=bind,source=requirements/base.txt,target=requirements.txt \
    pip install --upgrade pip uv && \
    UV_SYSTEM_PYTHON=1 UV_DEFAULT_INDEX=$(cat /run/secrets/PIP_INDEX_URL) uv pip install --no-cache-dir -r requirements.txt


COPY --chown=appuser:appuser app /code/app
# for local test with docker build: (but unnecessary for docker compose, as it can load .env file directly )
# COPY .env /code/.env

# Switch to the non-privileged user to run the application.
USER appuser

ARG app_version
RUN printf "\n__VERSION__='${app_version}'\n" >> /code/app/__init__.py

# Expose the port that the application listens on.
EXPOSE 8000

CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
